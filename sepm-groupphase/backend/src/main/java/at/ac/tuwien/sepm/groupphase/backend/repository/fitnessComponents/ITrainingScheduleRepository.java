package at.ac.tuwien.sepm.groupphase.backend.repository.fitnessComponents;

import at.ac.tuwien.sepm.groupphase.backend.entity.TrainingSchedule;
import org.springframework.dao.DataAccessException;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.NoSuchElementException;
import java.util.Optional;

@Repository
public interface ITrainingScheduleRepository extends JpaRepository<TrainingSchedule, Long> {

    /**
     * @param trainingSchedule to be saved in the database
     * @return the saved TrainingSchedule
     * @throws DataAccessException if an error occurred while trying to save the Workout in the database
     */
    TrainingSchedule save(TrainingSchedule trainingSchedule) throws DataAccessException;

    /**
     * @param id of TrainingSchedule to be found
     * @return TrainingSchedule found with the given id
     * @throws DataAccessException if an error occurred while trying to find the Workouts in the database
     */
    @Query("SELECT t FROM TrainingSchedule t WHERE t.id=?1 AND t.isHistory=false")
    TrainingSchedule findById(long id) throws DataAccessException;

    /**
     * @param id of TrainingSchedule to be deleted
     * @throws DataAccessException if an error occurred while trying to find the Workouts in the database
     */
    @Modifying
    @Transactional
    @Query("UPDATE TrainingSchedule t SET t.isHistory=true WHERE t.id=:id AND t.isHistory=false")
    void delete(@Param("id")long id) throws DataAccessException;

    /**
     * @param myId -> ID of the TrainingSchedule that is updated
     * @param dbId -> ID of the TrainingSchedule generated by the database automatically
     * @throws DataAccessException if an error occurred while trying to find the Workouts in the database
     */
    @Modifying
    @Transactional
    @Query("UPDATE TrainingSchedule t SET t.id=:myID WHERE t.id=:dbID AND t.isHistory=false")
    void updateNew(@Param("myID")long myId, @Param("dbID")long dbId) throws DataAccessException;

    /**
     * @param name of the TrainingSchedules to find
     * @return TrainingSchedules with name beginning with the given name-string
     * @throws DataAccessException if an error occurred while trying to find the TrainingSchedules in the database
     */
    @Query("SELECT t FROM TrainingSchedule t WHERE t.name LIKE ?1% AND t.isHistory=false")
    List<TrainingSchedule> findByName(String name) throws DataAccessException;

    /**
     * @param id of the TrainingSchedule to find
     * @param version of the TrainingSchedule to find
     * @return the TrainingSchedule with the given id and version
     * @throws NoSuchElementException if the TrainingSchedule could not be found in the database
     */
    Optional<TrainingSchedule> findByIdAndVersion(Long id, Integer version) throws NoSuchElementException;
}
